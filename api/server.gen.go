// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Address defines model for Address.
type Address struct {
	Email openapi_types.Email `json:"email"`
}

// Email defines model for Email.
type Email struct {
	// Body Email body
	Body string `json:"body"`

	// Receiver Recipient's email address
	Receiver openapi_types.Email `json:"receiver"`

	// Subject Email subject
	Subject string `json:"subject"`
}

// Response defines model for Response.
type Response struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// VerificationResponse defines model for VerificationResponse.
type VerificationResponse struct {
	Hash    string `json:"hash"`
	Message string `json:"message"`
	Status  string `json:"status"`
}

// PostBookaroomVerifyJSONRequestBody defines body for PostBookaroomVerify for application/json ContentType.
type PostBookaroomVerifyJSONRequestBody = Address

// PostSendMailJSONRequestBody defines body for PostSendMail for application/json ContentType.
type PostSendMailJSONRequestBody = Email

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send verification email for Bookaroom.app
	// (POST /bookaroom_verify)
	PostBookaroomVerify(w http.ResponseWriter, r *http.Request)
	// Send an email
	// (POST /send_mail)
	PostSendMail(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Send verification email for Bookaroom.app
// (POST /bookaroom_verify)
func (_ Unimplemented) PostBookaroomVerify(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send an email
// (POST /send_mail)
func (_ Unimplemented) PostSendMail(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostBookaroomVerify operation middleware
func (siw *ServerInterfaceWrapper) PostBookaroomVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBookaroomVerify(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSendMail operation middleware
func (siw *ServerInterfaceWrapper) PostSendMail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSendMail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/bookaroom_verify", wrapper.PostBookaroomVerify)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/send_mail", wrapper.PostSendMail)
	})

	return r
}

type PostBookaroomVerifyRequestObject struct {
	Body *PostBookaroomVerifyJSONRequestBody
}

type PostBookaroomVerifyResponseObject interface {
	VisitPostBookaroomVerifyResponse(w http.ResponseWriter) error
}

type PostBookaroomVerify200JSONResponse VerificationResponse

func (response PostBookaroomVerify200JSONResponse) VisitPostBookaroomVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBookaroomVerify400JSONResponse Response

func (response PostBookaroomVerify400JSONResponse) VisitPostBookaroomVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSendMailRequestObject struct {
	Body *PostSendMailJSONRequestBody
}

type PostSendMailResponseObject interface {
	VisitPostSendMailResponse(w http.ResponseWriter) error
}

type PostSendMail200JSONResponse Response

func (response PostSendMail200JSONResponse) VisitPostSendMailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSendMail400JSONResponse Response

func (response PostSendMail400JSONResponse) VisitPostSendMailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSendMaildefaultJSONResponse struct {
	Body       Response
	StatusCode int
}

func (response PostSendMaildefaultJSONResponse) VisitPostSendMailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Send verification email for Bookaroom.app
	// (POST /bookaroom_verify)
	PostBookaroomVerify(ctx context.Context, request PostBookaroomVerifyRequestObject) (PostBookaroomVerifyResponseObject, error)
	// Send an email
	// (POST /send_mail)
	PostSendMail(ctx context.Context, request PostSendMailRequestObject) (PostSendMailResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostBookaroomVerify operation middleware
func (sh *strictHandler) PostBookaroomVerify(w http.ResponseWriter, r *http.Request) {
	var request PostBookaroomVerifyRequestObject

	var body PostBookaroomVerifyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostBookaroomVerify(ctx, request.(PostBookaroomVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBookaroomVerify")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostBookaroomVerifyResponseObject); ok {
		if err := validResponse.VisitPostBookaroomVerifyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSendMail operation middleware
func (sh *strictHandler) PostSendMail(w http.ResponseWriter, r *http.Request) {
	var request PostSendMailRequestObject

	var body PostSendMailJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSendMail(ctx, request.(PostSendMailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSendMail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSendMailResponseObject); ok {
		if err := validResponse.VisitPostSendMailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTY/bNhD9KwRboBdZcpMeCp2aFItggbQo1kUu6SIYUyNpYopUOZQNI/B/L4aUveu1",
	"k1yS7WVX5ny9Gb55/KSNH0bv0EXW9SfNpscB0uerpgnI6XMMfsQQCdMvHICsfLQ+DBB1PZ8UOu5H1LXm",
	"GMh1+nAodMB/JwrY6Pr97HV/cvPrj2iiPhT65pjxvNDaN3v53yCbQGMk73SdnVWyXVSUggZpi+Ey7g4N",
	"jYQu/sQqQVEwd1h8tZNC85TRfgbO0fy1GZzgPWQscp/X5nKHPHrHeDmaAZmhS4ZLqBHixFdMT7DMfsUp",
	"2TUI7zBQSwak28/D6YH7q1i+C84i17uEK5HkWi85jXcR8oXNhNVkN70fSvNbJwel8YMutINBUtwmm1pR",
	"Qxu/1YWegoT0MY5cV9VutystuQ025CSwIlfldAvOIZW0dE6Nv6hD7xSxAmWp6+MO5a8C1yhsWzLCxszF",
	"BaNryHWKMWzJoFpPZKOaWM5ij+qNV2PwXYBhkCMLrpugw1L93aNYZAAKh3UAg6yYhtGSobjPxYBR+VZN",
	"jIUaYCMZSHAoahCsMr2Xmq0PqsEtWrlaVrveK4fYKFA9MFtctAFRsbeTNJjcyUXsAkTJmJeqnZwRM1ip",
	"Ti56wU9BwSiQEpG41IW2ZHAm03wHr0YwPaoX5fLq/CGZSx+6ao7l6u3t7zd/rm4WEnModKRo8WHyC7VK",
	"g2j3gi9v6ioPWhd6i4HzRf1c5nA/ooORdK1flsvypS70CLFPFK3W3m8geD982MpKJGEaPSeCybxSY7eN",
	"FPccXx+932XnzGgUQ9Y0oSe6FP1oMNVHFkBHHZavHwO2utY/VA9CXc0qXR0l+nC+MjFMmA7yuib8L5bL",
	"b1b2qiYkDOf8X03GIHM7WXWakIz5l2+I5Uv1X0Oj7vLYk6jwNAwQ9oIMXaO2j9o4ktcHdbq6EsZRBB06",
	"Fhk6net7SVbJxn44PVwzE54MQMrAMfmOYp92mUc01BI2qsEIZLn8x+niCosk/o/8IH0P+uRn95nJ86UL",
	"m99SUUU+ccfu/zfOiLGFycZnKf0GHQaw6iYEH64R9sikR6TMQieMFHcMomm6fv+UiG+9Aauy/Uxb66qy",
	"Yus9x/rX5XKpD/eH/wIAAP//ZRyqwhUKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
